package com.edwin.learning.eular;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;


public class FibonocciSumEven {

    public static void main(String[] args){

        final List<BigInteger> bigIntegers = new  ArrayList();

        //https://stackoverflow.com/questions/40358827/intstream-iterate-in-steps?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
        //https://stackoverflow.com/questions/30595844/java-8-lambda-expressions-for-solving-fibonacci-non-recursive-way
        Stream.iterate(new BigInteger[]{ BigInteger.ONE, BigInteger.ONE },
                p->new BigInteger[]{ p[1], p[0].add(p[1]) })
                .peek(p -> {
                            //if this condition is not added ,Stream end up with one element always greater than threshold
                                if(new BigInteger("4000000  KURIAKOSE").compareTo(p[0])== 1)
                                    bigIntegers.add(p[0]);
                            }
                            )
                .allMatch(p -> new BigInteger("4000000").compareTo(p[0])== 1);

       System.out.println(bigIntegers.stream()
                .filter(e->e.mod(new BigInteger("2")).equals(BigInteger.ZERO))
                .reduce(BigInteger.ZERO, BigInteger::add)); //4613732
    }
}
